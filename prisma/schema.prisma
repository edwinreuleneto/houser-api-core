generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users
model User {
  id          String  @id @default(uuid())
  email       String  @unique
  firebaseUid String? @unique
  name        String?
  fileId      String?

  active      Boolean @default(true)
  phone       String?
  firstAccess Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  photo File?  @relation("UserPhoto", fields: [fileId], references: [id])
  Blog  Blog[] @relation("BlogAuthor")

  @@map("users")
}

// Media
// Files
model File {
  id        String @id @default(uuid())
  name      String
  extension String
  baseUrl   String
  folder    String
  file      String
  url       String @unique
  size      Int

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  postId     String?
  User       User[] @relation("UserPhoto")
  contractId String?
  Contract   Contract? @relation(fields: [contractId], references: [id])
  Sale       Sale[]
  blogsAsFiles  Blog[] @relation("BlogFiles")
  blogsAsCover  Blog[] @relation("BlogCover")

  @@index([id, createdAt(sort: Desc)])
}

model Contract {
  id          String    @id @default(uuid())
  companyName String
  description String?
  website     String?
  startDate   DateTime
  endDate     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  files File[]
}

enum FileType {
  IMAGE
  DOCUMENT
  VIDEO
}

model Sale {
  id              String  @id @default(uuid())
  photoId         String?
  address         String
  lat             Float
  long            Float
  responsibleName String
  phone           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  photo File? @relation(fields: [photoId], references: [id])

  @@index([id, createdAt(sort: Desc)])
}

// Waiting List
model WaitingList {
  id      String @id @default(uuid())
  name    String
  email   String
  address String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("waiting_list")
}

// Blog
enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Social
enum SocialPlatform {
  LINKEDIN
  INSTAGRAM
}

model Blog {
  id          String     @id @default(uuid())
  title       String
  slug        String?    @unique
  description String
  content     String?
  coverId     String?
  metaTags    String[]
  authorId    String
  publishedAt DateTime?
  status      BlogStatus @default(DRAFT)
  viewsCount  Int        @default(0)
  readsCount  Int        @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cover  File?  @relation("BlogCover", fields: [coverId], references: [id])
  author User   @relation("BlogAuthor", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  files  File[] @relation("BlogFiles")
  socialPosts SocialPost[]

  @@index([id, createdAt(sort: Desc)])
  @@map("blogs")
}

model SocialPost {
  id        String         @id @default(uuid())
  blogId    String
  platform  SocialPlatform
  content   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([blogId, platform])
  @@map("social_posts")
}
