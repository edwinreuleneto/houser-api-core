generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users
model User {
  id          String  @id @default(uuid())
  email       String  @unique
  firebaseUid String? @unique
  name        String?
  fileId      String?

  active      Boolean @default(true)
  phone       String?
  firstAccess Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // Relations
  photo File? @relation(fields: [fileId], references: [id])

  @@map("users")
}

// Media
// Files
model File {
  id        String @id @default(uuid())
  name      String
  extension String
  baseUrl   String
  folder    String
  file      String
  url       String @unique
  size      Int

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  postId     String?
  User       User[]
  contractId String?
  Contract   Contract? @relation(fields: [contractId], references: [id])
  Sale       Sale[]

  @@index([id, createdAt(sort: Desc)])
}

model Contract {
  id          String    @id @default(uuid())
  companyName String
  description String?
  website     String?
  startDate   DateTime
  endDate     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  files File[]
}

enum FileType {
  IMAGE
  DOCUMENT
  VIDEO
}

model Sale {
  id              String  @id @default(uuid())
  photoId         String?
  address         String
  lat             Float
  long            Float
  responsibleName String
  phone           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  photo File? @relation(fields: [photoId], references: [id])

  @@index([id, createdAt(sort: Desc)])
}

// Waiting List
model WaitingList {
  id      String @id @default(uuid())
  name    String
  email   String
  address String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("waiting_list")
}
